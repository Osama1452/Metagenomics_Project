library(DECIPHER)
?Clusterize
# specify the path to your file of sequences:
fas <- "D:/Osama/biotec/Bioinformatics/metagenomeics/phage/filtered/"
folder_path <- "D:/osama/bioteC/Bioinformatics/metagenomics/phage/filtered/"
dna <- readDNAStringSet(fas)
# Get a list of all FASTA files in the folder
fasta_files <- list.files(path = folder_path, pattern = "\\.fasta$", full.names = TRUE)
# Read each FASTA file and combine them into one object if needed
# This is an example of reading only the first file
if (length(fasta_files) > 0) {
fas <- fasta_files[1] # You can choose which file to read
dna <- readDNAStringSet(fas)
print(paste("File read:", fas))
} else {
print("No FASTA files found in the specified path.")
}
dna <- readDNAStringSet(fas)
if (length(fasta_files) > 0) {
# Initialize an empty DNAStringSet to store combined sequences
all_dna_sequences <- DNAStringSet()
# Loop through each FASTA file and read its sequences
for (file in fasta_files) {
current_dna <- readDNAStringSet(file)
all_dna_sequences <- c(all_dna_sequences, current_dna)
print(paste("Read file:", file, "with", length(current_dna), "sequences."))
}
dna <- all_dna_sequences # Assign the combined sequences to 'dna'
print(paste("Successfully read and combined a total of", length(dna), "sequences from all FASTA files."))
} else {
# If no FASTA files are found, print a message and set dna to NULL or handle appropriately
print("No FASTA files found in the specified path. 'dna' object will not be created.")
dna <- NULL # Or you can choose to stop the script here with stop("No FASTA files found.")
}
# specify the path to your file of sequences:
fas <- "D:/Osama/biotec/Bioinformatics/metagenomeics/phage/filtered/"
folder_path <- "D:/osama/bioteC/Bioinformatics/metagenomics/phage/filtered/"
dna <- readDNAStringSet(fas)
fasta_files <- list.files(path = dir_path, pattern = "\\.fasta$|\\.fas$", full.names = TRUE)
fasta_files <- list.files(path = dir_path, pattern = "\\.fasta$|\\.fas$", full.names = TRUE)
# Get a list of all FASTA files in the folder
fasta_files <- list.files(path = folder_path, pattern = "\\.fasta$", full.names = TRUE)
dna_list <- list()
for (fas in fasta_files) {
dna <- readDNAStringSet(fas)
dna_list[[basename(fas)]] <- dna  # Store each file's sequences with its name
cat("Loaded:", basename(fas), "with", length(dna), "sequences\n")
}
# Combine all DNAStringSet objects into a single DNAStringSet
combined_dna <- do.call(c, dna_list)
cat("\nTotal number of sequences:", length(combined_dna), "\n")
# specify the path to your file of sequences:
fas <- "D:/Osama/biotec/Bioinformatics/metagenomeics/phage/filtered/"
folder_path <- "D:/osama/bioteC/Bioinformatics/metagenomics/phage/filtered/"
dna <- readDNAStringSet(fas)
# List all FASTA files in the directory
fas_files <- list.files(path = folder_path, pattern = "\\.f(ast)?q$", full.names = TRUE)
# Check if any FASTA files were found
if (length(fas_files) == 0) {
stop("No FASTA files found in the specified directory!")
}
# List all FASTA files in the directory with .filt extension
fas_files <- list.files(path = folder_path, pattern = "\\.filt$", full.names = TRUE)
# Check if any FASTA files were found
if (length(fas_files) == 0) {
stop("No FASTA files found in the specified directory!")
}
# specify the path to your file of sequences:
fas <- "D:/Osama/biotec/Bioinformatics/metagenomeics/phage/filtered/"
dna <- readDNAStringSet(fas)
# Specify the path to your directory containing the FASTA files:
fasta_dir <- "D:/Osama/biotec/Bioinformatics/metagenomeics/phage/filtered/"
# List all FASTA files in the directory
# This will find files ending with .fasta or .fas (case-insensitive)
fasta_files <- list.files(path = fasta_dir, pattern = "\\.fasta$|\\.fas$", full.names = TRUE, ignore.case = TRUE)
# Check if any FASTA files were found
stop("No FASTA files found in the specified directory.")
} else {
# Initialize an empty list to store DNAStringSet objects from each file
all_dna_sequences <- list()
# Loop through each FASTA file and read its sequences
for (file_path in fasta_files) {
cat("Reading file:", file_path, "\n") # Optional: print which file is being read
dna_set <- readDNAStringSet(file_path)
all_dna_sequences[[basename(file_path)]] <- dna_set
}
dna <- readDNAStringSet(fas)
fasta_dir <- "D:/Osama/biotec/Bioinformatics/metagenomeics/phage/filtered/"
fasta_files <- list.files(path = fasta_dir, pattern = "\\.filt$|\\.fasta$|\\.fas$", full.names = TRUE, ignore.case = TRUE)
if (length(fasta_files) == 0) {
stop("No FASTA files found in the specified directory with .filt, .fasta, or .fas extensions.")
} else {
# ... rest of your code to process files ...
}
{
# Initialize an empty list to store DNAStringSet objects from each file
all_dna_sequences <- list()
# Loop through each FASTA file and read its sequences
for (file_path in fasta_files) {
cat("Reading file:", file_path, "\n") # Optional: print which file is being read
dna_set <- readDNAStringSet(file_path)
all_dna_sequences[[basename(file_path)]] <- dna_set
}
{
# Load the DECIPHER and Biostrings libraries
# Biostrings is implicitly used by DECIPHER's sequence handling
library(DECIPHER)
library("dada2")
getwd()
list.files()
setwd("D:/Osama/biotec/Bioinformatics/metagenomeics/meta")
list.files()
#sort out the .fastq files into forward and reverse reads and separate them into
# fnFs and fnRs groups
fnFs <- sort(list.files("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", pattern = "_R1_001.fastq"))
fnRs <- sort(list.files("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", pattern = "_R2_001.fastq"))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(fnFs, "_"), `[`, 1)
sample.names <- sapply(strsplit(fnRs, "_"), `[`, 1)
# Specify the full path to the fnFs and fnRs
fnFs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", fnFs)
fnRs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", fnRs)
#filtering and trimming
#filt_path <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/", "D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered") # Place filtered files in filtered/ subdirectory
filtFs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered", paste0(sample.names, "_F_filt.fastq"))
filtRs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered", paste0(sample.names, "_R_filt.fastq"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(285,225),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
#filtering and trimming
#filt_path <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/", "D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered") # Place filtered files in filtered/ subdirectory
filtFs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered", paste0(sample.names, "_F_filt.fastq"))
filtRs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered", paste0(sample.names, "_R_filt.fastq"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(285,225),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
library("dada2")
getwd()
list.files()
setwd("D:/Osama/biotec/Bioinformatics/metagenomeics/meta")
list.files()
#sort out the .fastq files into forward and reverse reads and separate them into
# fnFs and fnRs groups
fnFs <- sort(list.files("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", pattern = "_R1_001.fastq"))
fnRs <- sort(list.files("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", pattern = "_R2_001.fastq"))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(fnFs, "_"), `[`, 1)
sample.names <- sapply(strsplit(fnRs, "_"), `[`, 1)
# Specify the full path to the fnFs and fnRs
fnFs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", fnFs)
fnRs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", fnRs)
#filtering and trimming
#filt_path <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/", "D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered") # Place filtered files in filtered/ subdirectory
filtFs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered", paste0(sample.names, "_F_filt.fastq"))
filtRs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered", paste0(sample.names, "_R_filt.fastq"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(285,225),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
#sort out the .fastq files into forward and reverse reads and separate them into
# fnFs and fnRs groups
fnFs <- sort(list.files("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", pattern = "_R1_001.fastq"))
fnRs <- sort(list.files("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", pattern = "_R2_001.fastq"))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(fnFs, "_"), `[`, 1)
sample.names <- sapply(strsplit(fnRs, "_"), `[`, 1)
# Specify the full path to the fnFs and fnRs
fnFs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", fnFs)
fnRs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta", fnRs)
#filtering and trimming
#filt_path <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/", "D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered") # Place filtered files in filtered/ subdirectory
filtFs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered", paste0(sample.names, "_F_filt.fastq"))
filtRs <- file.path("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/filtered", paste0(sample.names, "_R_filt.fastq"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(285,225),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
head(out)
print(filtFs)
print(filtRs)
#learn error
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
#dereplicate sequences
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-Species objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
#sample inference using sequence variant inference New_project/algorithm on dereped data
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errF, multithread=TRUE)
#Inspecting the dada-Species object returned by dada:
dadaFs
#Merge the denoised forward and reverse reads:
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
seqtab
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(mergers, getN), rowSums(seqtab), rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoised", "merged", "tabled", "nonchim")
rownames(track) <- sample.names
head(track)
taxa <- assignTaxonomy(seqtab.nochim, "D:/Osama/biotec/Bioinformatics/metagenomeics/meta/silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE, tryRC = TRUE)
taxa <- assignTaxonomy(seqtab.nochim, "D:/Osama/biotec/Bioinformatics/metagenomeics/silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE, tryRC = TRUE)
# A quick taxonomic inspection:
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)
taxa_df <- as.data.frame(taxa)
write.csv(taxa_df, "D:/Osama/biotec/Bioinformatics/metagenomeics/meta/taxa_results.csv", row.names = FALSE)
#save all your files as tables externally> write.table(seqtab.nochim, file = "/Volumes/SBPD/grazing_Lewis/lewis_fastq/uparse_otus/lewis.asv_table.txt", col.names = TRUE, row.names = TRUE)
write.table(seqtab.nochim, file = "D:/Osama/biotec/Bioinformatics/metagenomeics/meta/dada5.asv_table.txt", col.names = TRUE, row.names = TRUE, sep = "\t")
write.table(track, file = "D:/Osama/biotec/Bioinformatics/metagenomeics/meta/dada5.asv_track.txt", col.names = TRUE, row.names = TRUE, sep = "\t")
write.table(taxa, file = "D:/Osama/biotec/Bioinformatics/metagenomeics/meta/dada5.asv_taxa.txt", col.names = TRUE, row.names = TRUE, sep = "\t")
library("dada2")
library("phyloseq")
library("ggplot2")
library("magrittr")
library("Biostrings")
library("ape")
library("vegan")
library("plyr")
library("scales")
library("grid")
library("reshape2")
mapping <- read.delim2("D:/Osama/biotec/Bioinformatics/metagenomeics/meta/mapping.txt")
mapping <- as.data.frame(mapping)
print(mapping)
rownames(mapping) <- mapping[ , 1]
head(mapping)
mapping
asv_nochim = otu_table(seqtab.nochim, taxa_are_rows = F)
tax = tax_table(taxa) # make 'tax_table' into a matrix
mapping <- sample_data(mapping)
#merge everything into one object:
ps = merge_phyloseq(asv_nochim, tax, mapping)
ps
library(dada2)
library(phyloseq)
library(DECIPHER)
library(phangorn)
sequences <- getSequences(seqtab.nochim)
names(sequences) <- sequences
alignment <- AlignSeqs(DNAStringSet(sequences), anchor = NA)
phang.align <- phyDat(as(alignment, "matrix"), type = "DNA")
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm)
fit <- pml(treeNJ, data = phang.align)
fitGTR <- update(fit, k = 4, inv = 0.2)
fitGTR <- optim.pml(fitGTR, model = "GTR", optInv = TRUE, optGamma = TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
treeNJ <- NJ(dm)
fit <- pml(treeNJ, data = phang.align)
fitGTR <- update(fit, k = 4, inv = 0.2)
fitGTR <- optim.pml(fitGTR, model = "GTR", optInv = TRUE, optGamma = TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
fitGTR <- update(fit, k = 4, inv = 0.2)
fitGTR <- optim.pml(fitGTR, model = "GTR", optInv = TRUE, optGamma = TRUE,
rearrangement = "none", control = pml.control(trace = 0))
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE),
tax_table(taxa.plus),
phy_tree(fitGTR$tree))
fitGTR <- optim.pml(fitGTR, model = "GTR", optInv = TRUE, optGamma = TRUE,
rearrangement = "none", control = pml.control(trace = 0))
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE),
tax_table(taxa.plus),
phy_tree(fitGTR$tree))
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE),
tax_table(taxa),
phy_tree(fitGTR$tree))
set.seed(711)
phy_tree(ps) <- root(phy_tree(ps), sample(taxa_names(ps), 1), resolve.root = TRUE)
print(ps)
library(phyloseq)
unifrac_dist <- UniFrac(ps, weighted = TRUE)
plot_tree(ps, ladderize = "left")
